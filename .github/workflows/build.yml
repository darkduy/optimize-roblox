name: Build Roblox Optimizer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CMAKE_VERSION: 3.21.0

jobs:
  # Windows Build (Windows 10/11 x64 only)
  build-windows:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        config: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake (Windows)
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DWINDOWS_BUILD=ON -DTARGET_WINDOWS_10_PLUS=ON

    - name: Build Windows
      run: cmake --build build --config ${{ matrix.config }} --parallel 4

    - name: Create artifacts directory
      run: mkdir -p artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}
      shell: bash

    - name: Package Windows
      run: |
        if (Test-Path "build/${{ matrix.config }}/RobloxOptimizer.exe") {
          Copy-Item "build/${{ matrix.config }}/RobloxOptimizer.exe" "artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/"
          Write-Host "✅ RobloxOptimizer.exe found and copied"
        } else {
          Write-Host "❌ RobloxOptimizer.exe not found in build/${{ matrix.config }}/"
          Get-ChildItem "build/${{ matrix.config }}/" -ErrorAction SilentlyContinue
        }
        if (Test-Path "README.md") {
          Copy-Item "README.md" "artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/"
        }
      shell: powershell

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: roblox-optimizer-windows-${{ matrix.arch }}-${{ matrix.config }}
        path: artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/

  # Android Build (Android 8.0+ API 26+)
  build-android:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, x86_64]
        config: [Release, Debug]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android NDK
      run: |
        echo "Installing Android NDK for modern Android devices..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" || true
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        ls -la $ANDROID_HOME/ndk/ || true

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Verify NDK installation
      run: |
        echo "NDK Home: $ANDROID_NDK_HOME"
        ls -la $ANDROID_NDK_HOME/ || echo "NDK not found"
        ls -la $ANDROID_NDK_HOME/build/cmake/ || echo "CMake toolchain not found"

    - name: Configure CMake (Android)
      run: |
        echo "Building for Android 8.0+ (API 26) with ABI: ${{ matrix.abi }}"
        cmake -B build-android-${{ matrix.abi }} \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_NATIVE_API_LEVEL=26 \
          -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
          -DANDROID_BUILD=ON \
          -DCMAKE_ANDROID_STL_TYPE=c++_shared \
          -DTARGET_ANDROID_8_PLUS=ON

    - name: Build Android
      run: cmake --build build-android-${{ matrix.abi }} --config ${{ matrix.config }} --parallel 4

    - name: Package Android
      run: |
        mkdir -p artifacts/android-${{ matrix.abi }}-${{ matrix.config }}
        
        echo "Searching for built Android library..."
        find build-android-${{ matrix.abi }} -name "*.so" -type f || echo "No .so files found"
        
        if [ -f "build-android-${{ matrix.abi }}/libRobloxOptimizerAndroid.so" ]; then
          cp build-android-${{ matrix.abi }}/libRobloxOptimizerAndroid.so artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/
          echo "✅ libRobloxOptimizerAndroid.so found and copied"
        else
          echo "❌ libRobloxOptimizerAndroid.so not found"
          ls -la build-android-${{ matrix.abi }}/ || true
        fi
        
        if [ -f "README.md" ]; then
          cp README.md artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/
        fi
        
        cat > artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/ANDROID_INFO.txt << 'EOF'
        Android Roblox Optimizer
        ========================
        Target: Android 8.0+ (API Level 26+)
        Architecture: ${{ matrix.abi }}
        Build Type: ${{ matrix.config }}

        Requirements:
        - Android 8.0 Oreo or higher
        - ARM64 or x86_64 processor
        - Roblox app installed

        Installation:
        1. Install APK from releases
        2. Grant necessary permissions
        3. Run optimizer before launching Roblox
        EOF

    - name: Upload Android Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: roblox-optimizer-android-${{ matrix.abi }}-${{ matrix.config }}
        path: artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/

  # Create Release
  create-release:
    if: github.event_name == 'release'
    needs: [build-windows, build-android]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*" || true

    - name: Create release packages
      run: |
        cd artifacts
        
        for dir in roblox-optimizer-windows-*; do
          if [ -d "$dir" ]; then
            echo "Creating Windows package for $dir (Windows 10/11 compatible)"
            zip -r "${dir}.zip" "$dir"
          fi
        done
        
        for dir in roblox-optimizer-android-*; do
          if [ -d "$dir" ]; then
            echo "Creating Android package for $dir (Android 8.0+ compatible)"
            tar -czf "${dir}.tar.gz" "$dir"
          fi
        done
        
        echo "Created packages:"
        ls -la *.zip *.tar.gz || echo "No packages created"

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.zip
          artifacts/*.tar.gz
        body: |
          ## 🎮 Roblox System Optimizer

          ### 🖥️ Windows (x64 only)
          - **Requirements**: Windows 10 version 1903 or Windows 11
          - **Architecture**: 64-bit only (Roblox requirement)
          - **Features**: Process optimization, memory management, registry tweaks

          ### 📱 Android (Modern devices)
          - **Requirements**: Android 8.0 Oreo (API 26) or higher
          - **Architecture**: ARM64 (arm64-v8a) and x86_64 only
          - **Features**: CPU/GPU governor optimization, system tweaks

          ### ❌ Unsupported Platforms
          - Windows 7/8/8.1 (Roblox discontinued support)
          - 32-bit Windows (Roblox discontinued support)
          - Android 7.x and below (performance limitations)
          - Linux (Roblox not available)

          ### 🛡️ Safety & Compliance
          - ✅ No game file modification
          - ✅ No code injection
          - ✅ Roblox ToS compliant
          - ✅ Uses only public OS APIs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build summary
  build-summary:
    if: always()
    needs: [build-windows, build-android]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Enhanced Build Summary
      run: |
        echo "## 🏗️ Enhanced Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Build Results" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Architecture | Release | Debug | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------------|---------|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Windows build status
        WINDOWS_STATUS="${{ needs.build-windows.result }}"
        if [ "$WINDOWS_STATUS" = "success" ]; then
          echo "| Windows | x64 | ✅ | ✅ | 🟢 Success | All builds completed |" >> $GITHUB_STEP_SUMMARY
        elif [ "$WINDOWS_STATUS" = "failure" ]; then
          echo "| Windows | x64 | ❌ | ❌ | 🔴 Failed | Check logs for details |" >> $GITHUB_STEP_SUMMARY
        elif [ "$WINDOWS_STATUS" = "cancelled" ]; then
          echo "| Windows | x64 | ⏹️ | ⏹️ | 🟡 Cancelled | Build was cancelled |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Windows | x64 | ❓ | ❓ | 🟠 Skipped | Build was skipped |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Android build status
        ANDROID_STATUS="${{ needs.build-android.result }}"
        if [ "$ANDROID_STATUS" = "success" ]; then
          echo "| Android | ARM64/x64 | ✅ | ✅ | 🟢 Success | All ABIs built successfully |" >> $GITHUB_STEP_SUMMARY
        elif [ "$ANDROID_STATUS" = "failure" ]; then
          echo "| Android | ARM64/x64 | ❌ | ❌ | 🔴 Failed | NDK/CMake configuration issues |" >> $GITHUB_STEP_SUMMARY
        elif [ "$ANDROID_STATUS" = "cancelled" ]; then
          echo "| Android | ARM64/x64 | ⏹️ | ⏹️ | 🟡 Cancelled | Build was cancelled |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Android | ARM64/x64 | ❓ | ❓ | 🟠 Skipped | Build was skipped |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$WINDOWS_STATUS" = "success" ] && [ "$ANDROID_STATUS" = "success" ]; then
          echo "### 🎉 Overall Status: ALL BUILDS SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Ready for release!** All platforms built successfully." >> $GITHUB_STEP_SUMMARY
        elif [ "$WINDOWS_STATUS" = "success" ] || [ "$ANDROID_STATUS" = "success" ]; then
          echo "### ⚠️ Overall Status: PARTIAL SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "Some platforms built successfully, others failed." >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🚨 Overall Status: BUILD FAILED" >> $GITHUB_STEP_SUMMARY
          echo "All builds failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Build artifacts info
        echo "### 📦 Expected Build Artifacts" >> $GITHUB_STEP_SUMMARY
        if [ "$WINDOWS_STATUS" = "success" ]; then
          echo "#### 🖥️ Windows Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- \`roblox-optimizer-windows-x64-Release\` - Production ready" >> $GITHUB_STEP_SUMMARY
          echo "- \`roblox-optimizer-windows-x64-Debug\` - Development/testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: \`RobloxOptimizer.exe\`, \`README.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$ANDROID_STATUS" = "success" ]; then
          echo "#### 📱 Android Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- \`roblox-optimizer-android-arm64-v8a-Release\` - ARM64 devices" >> $GITHUB_STEP_SUMMARY
          echo "- \`roblox-optimizer-android-x86_64-Release\` - x86_64 devices" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: \`libRobloxOptimizerAndroid.so\`, \`README.md\`, \`ANDROID_INFO.txt\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Troubleshooting section
        echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$WINDOWS_STATUS" != "success" ]; then
          echo "#### Windows Build Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- **CMake configuration failed**: Check Visual Studio version and CMake path" >> $GITHUB_STEP_SUMMARY
          echo "- **Compilation errors**: Verify C++17 compatibility and Windows SDK" >> $GITHUB_STEP_SUMMARY
          echo "- **Linking errors**: Check library dependencies (psapi, advapi32, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "- **Missing files**: Ensure all source files are present in \`src/\` directories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$ANDROID_STATUS" != "success" ]; then
          echo "#### Android Build Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- **NDK not found**: Android NDK 25.2.9519653 installation failed" >> $GITHUB_STEP_SUMMARY
          echo "- **CMake toolchain**: \`android.toolchain.cmake\` not accessible" >> $GITHUB_STEP_SUMMARY
          echo "- **API Level**: Minimum API 26 (Android 8.0+) required" >> $GITHUB_STEP_SUMMARY
          echo "- **JNI errors**: Check JNI function signatures and native method exports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Platform compatibility reminder
        echo "### 🎯 Platform Compatibility" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### ✅ Supported Platforms:" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows**: 10 version 1903+, Windows 11 (x64 only)" >> $GITHUB_STEP_SUMMARY
        echo "- **Android**: 8.0 Oreo+ (API 26+), ARM64 & x86_64 architectures" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### ❌ Unsupported Platforms:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows 7/8/8.1 - Roblox discontinued support" >> $GITHUB_STEP_SUMMARY
        echo "- 32-bit Windows - Roblox requires 64-bit" >> $GITHUB_STEP_SUMMARY
        echo "- Android 7.x and below - Performance and security limitations" >> $GITHUB_STEP_SUMMARY
        echo "- Linux/macOS - Roblox not officially available" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Quick actions
        echo "### ⚡ Quick Actions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "$WINDOWS_STATUS" = "success" ] || [ "$ANDROID_STATUS" = "success" ]; then
          echo "✅ **Download artifacts** from the Actions summary page" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Test the builds** on target platforms" >> $GITHUB_STEP_SUMMARY
          if [ "$WINDOWS_STATUS" = "success" ] && [ "$ANDROID_STATUS" = "success" ]; then
            echo "✅ **Create a release** tag to trigger release packaging" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ "$WINDOWS_STATUS" != "success" ] || [ "$ANDROID_STATUS" != "success" ]; then
          echo "🔍 **Check individual job logs** for detailed error messages" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Fix source code issues** and push new commits" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Update CMakeLists.txt** if configuration problems persist" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Build completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
        echo "*Commit: ${{ github.sha }}*" >> $GITHUB_STEP_SUMMARY
        echo "*Workflow: ${{ github.workflow }} #${{ github.run_number }}*" >> $GITHUB_STEP_SUMMARY

    - name: Post build status to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const windowsStatus = '${{ needs.build-windows.result }}';
          const androidStatus = '${{ needs.build-android.result }}';
          
          let emoji = '';
          let status = '';
          let details = '';
          
          if (windowsStatus === 'success' && androidStatus === 'success') {
            emoji = '✅';
            status = 'All builds successful';
            details = 'Windows and Android builds completed successfully.';
          } else if (windowsStatus === 'success' || androidStatus === 'success') {
            emoji = '⚠️';
            status = 'Partial build success';
            details = `Windows: ${windowsStatus}, Android: ${androidStatus}`;
          } else {
            emoji = '❌';
            status = 'All builds failed';
            details = `Windows: ${windowsStatus}, Android: ${androidStatus}`;
          }
          
          const comment = `## ${emoji} Build Status: ${status}
          
**Platform Results:**
- 🖥️ Windows x64: \`${windowsStatus}\`
- 📱 Android (ARM64/x64): \`${androidStatus}\`

**Details:** ${details}

**Artifacts:** ${windowsStatus === 'success' || androidStatus === 'success' ? 'Available in Actions summary' : 'No artifacts generated'}

**Commit:** ${context.sha.substring(0, 7)}
**Workflow:** [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Build failure notification
      if: needs.build-windows.result == 'failure' || needs.build-android.result == 'failure'
      run: |
        echo "🚨 BUILD FAILURE DETECTED"
        echo "Windows Status: ${{ needs.build-windows.result }}"
        echo "Android Status: ${{ needs.build-android.result }}"
        echo ""
        echo "Common solutions:"
        echo "1. Check CMakeLists.txt for syntax errors"
        echo "2. Verify all source files exist and compile"
        echo "3. Check platform-specific dependencies"
        echo "4. Review job logs for detailed error messages"
        echo ""
        echo "For support: https://github.com/darkduy/optimize-roblox/issues"
        
        # Exit with error to mark this step as failed for visibility
        exit 1
