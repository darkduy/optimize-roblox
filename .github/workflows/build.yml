# .github/workflows/build.yml
name: Build Roblox Optimizer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CMAKE_VERSION: 3.21.0

jobs:
  # Windows Build
  build-windows:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, Win32]
        config: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake (Windows)
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DWINDOWS_BUILD=ON

    - name: Build Windows
      run: cmake --build build --config ${{ matrix.config }} --parallel 4

    - name: Create artifacts directory
      run: mkdir -p artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}
      shell: bash

    - name: Package Windows
      run: |
        if (Test-Path "build/${{ matrix.config }}/RobloxOptimizer.exe") {
          Copy-Item "build/${{ matrix.config }}/RobloxOptimizer.exe" "artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/"
          Write-Host "✅ RobloxOptimizer.exe found and copied"
        } else {
          Write-Host "❌ RobloxOptimizer.exe not found in build/${{ matrix.config }}/"
          Get-ChildItem "build/${{ matrix.config }}/" -ErrorAction SilentlyContinue
        }
        if (Test-Path "README.md") {
          Copy-Item "README.md" "artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/"
        }
      shell: powershell

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: roblox-optimizer-windows-${{ matrix.arch }}-${{ matrix.config }}
        path: artifacts/windows-${{ matrix.arch }}-${{ matrix.config }}/

  # Android Build
  build-android:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]
        config: [Release, Debug]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android NDK
      run: |
        echo "Installing Android NDK..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" || true
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        ls -la $ANDROID_HOME/ndk/ || true

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Verify NDK installation
      run: |
        echo "NDK Home: $ANDROID_NDK_HOME"
        ls -la $ANDROID_NDK_HOME/ || echo "NDK not found"
        ls -la $ANDROID_NDK_HOME/build/cmake/ || echo "CMake toolchain not found"

    - name: Configure CMake (Android)
      run: |
        cmake -B build-android-${{ matrix.abi }} \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
          -DANDROID_BUILD=ON \
          -DCMAKE_ANDROID_STL_TYPE=c++_shared

    - name: Build Android
      run: cmake --build build-android-${{ matrix.abi }} --config ${{ matrix.config }} --parallel 4

    - name: Package Android
      run: |
        mkdir -p artifacts/android-${{ matrix.abi }}-${{ matrix.config }}
        
        # Look for the built library
        find build-android-${{ matrix.abi }} -name "*.so" -type f || echo "No .so files found"
        
        if [ -f "build-android-${{ matrix.abi }}/libRobloxOptimizerAndroid.so" ]; then
          cp build-android-${{ matrix.abi }}/libRobloxOptimizerAndroid.so artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/
          echo "✅ libRobloxOptimizerAndroid.so found and copied"
        else
          echo "❌ libRobloxOptimizerAndroid.so not found"
          ls -la build-android-${{ matrix.abi }}/ || true
        fi
        
        if [ -f "README.md" ]; then
          cp README.md artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/
        fi

    - name: Upload Android Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: roblox-optimizer-android-${{ matrix.abi }}-${{ matrix.config }}
        path: artifacts/android-${{ matrix.abi }}-${{ matrix.config }}/

  # Linux Build (for testing)
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}

    - name: Configure CMake (Linux)
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DLINUX_BUILD=ON

    - name: Build Linux
      run: cmake --build build --parallel 4

    - name: Package Linux
      run: |
        mkdir -p artifacts/linux-${{ matrix.config }}
        
        if [ -f "build/RobloxOptimizerLinux" ]; then
          cp build/RobloxOptimizerLinux artifacts/linux-${{ matrix.config }}/
          echo "✅ RobloxOptimizerLinux found and copied"
        else
          echo "❌ RobloxOptimizerLinux not found"
          ls -la build/ || true
        fi
        
        if [ -f "README.md" ]; then
          cp README.md artifacts/linux-${{ matrix.config }}/
        fi

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: roblox-optimizer-linux-${{ matrix.config }}
        path: artifacts/linux-${{ matrix.config }}/

  # Create Release
  create-release:
    if: github.event_name == 'release'
    needs: [build-windows, build-android, build-linux]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*" || true

    - name: Create release packages
      run: |
        cd artifacts
        
        # Windows packages
        for dir in roblox-optimizer-windows-*; do
          if [ -d "$dir" ]; then
            echo "Creating package for $dir"
            zip -r "${dir}.zip" "$dir"
          fi
        done
        
        # Android packages  
        for dir in roblox-optimizer-android-*; do
          if [ -d "$dir" ]; then
            echo "Creating package for $dir"
            tar -czf "${dir}.tar.gz" "$dir"
          fi
        done
        
        # Linux packages
        for dir in roblox-optimizer-linux-*; do
          if [ -d "$dir" ]; then
            echo "Creating package for $dir"
            tar -czf "${dir}.tar.gz" "$dir"
          fi
        done
        
        # List created packages
        echo "Created packages:"
        ls -la *.zip *.tar.gz || echo "No packages created"

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.zip
          artifacts/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build summary
  build-summary:
    if: always()
    needs: [build-windows, build-android, build-linux]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Windows  | ${{ needs.build-windows.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android  | ${{ needs.build-android.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Linux    | ${{ needs.build-linux.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: RobloxOptimizer.exe" >> $GITHUB_STEP_SUMMARY
        echo "- Android: libRobloxOptimizerAndroid.so" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: RobloxOptimizerLinux" >> $GITHUB_STEP_SUMMARY
